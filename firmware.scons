Import("env")

env.Append(
    LIB_DIST_DIR="${BUILD_DIR}/lib",
)

env.Append(
    LIBPATH=[
        "${LIB_DIST_DIR}",
    ],
    CPPDEFINES=[
        ("TARGET", "${TARGET_HW}"),
    ],
)

env.Append(
    CPPPATH=[
        "#/core",
        "#/applications",
        "#/firmware/targets/f${TARGET_HW}/ble_glue",
        "#/firmware/targets/f${TARGET_HW}/fatfs",
        "#/firmware/targets/f${TARGET_HW}/furi_hal",
        "#/firmware/targets/f${TARGET_HW}/Inc",
        "#/firmware/targets/furi_hal_include",
    ]
)

depends = env.BuildModules(
    [
        "lib",
        "firmware",
        "assets",
        "core",
    ],
)

fwenv = env.Clone()
Export("fwenv")

SConscript("sconscfg/firmwareopts.scons")


if fwenv["FIRMWARE_BUILD_CFG"] == "updater":
    fwenv.Append(
        CPPDEFINES=[
            "SRV_GUI",
            "SRV_INPUT",
            "SRV_NOTIFICATION",
            "SRV_STORAGE",
            "SRV_UPDATER",
        ]
    )
else:
    fwenv.Append(
        CPPDEFINES=[
            "APP_ABOUT",
            "APP_ACCESSOR",
            "APP_ARCHIVE",
            "APP_BAD_USB",
            "APP_BLE_HID",
            "APP_BLINK",
            "APP_DISPLAY_TEST",
            "APP_GPIO",
            "APP_IBUTTON",
            "APP_INFRARED",
            "APP_INFRARED_MONITOR",
            "APP_KEYPAD_TEST",
            "APP_LF_RFID",
            "APP_MUSIC_PLAYER",
            "APP_NFC",
            "APP_PASSPORT",
            "APP_SNAKE_GAME",
            "APP_SUBGHZ",
            "APP_U2F",
            "APP_UART_ECHO",
            "APP_UPDATER",
            "APP_USB_MOUSE",
            "APP_USB_TEST",
            "APP_VIBRO_TEST",
            "SRV_BT",
            "SRV_CLI",
            "SRV_DESKTOP",
            "SRV_DIALOGS",
            "SRV_DOLPHIN",
            "SRV_GUI",
            "SRV_INPUT",
            "SRV_LOADER",
            "SRV_NOTIFICATION",
            "SRV_POWER",
            "SRV_RPC",
            "SRV_STORAGE",
        ]
    )


sources = fwenv.GlobRecursive("*.c*", "applications")


# Debug
# print(fwenv.Dump())

# Git Version management

build_version = fwenv.Command(
    "#lib/toolbox/version.inc.h",
    [],
    "${PYTHON3} scripts/version.py generate -o ${TARGET} --dir ${ROOT_DIR}",
)
fwenv.Precious(build_version)
fwenv.AlwaysBuild(build_version)


# Full firmware definition

firmware_elf = fwenv.Program(
    "${FIRMWARE_BUILD_CFG}",
    sources,
    LIBS=[
        "flipper${TARGET_HW}",
        "core",
        "freertos",
        "STM32CubeWB",
        "hwdrivers",
        "fatfs",
        "littlefs",
        "subghz",
        "toolbox",
        "microtar",
        "usb_stm32",
        "ST25RFAL002",
        "flipperformat",
        "misc",
        "infrared",
        "appframe",
        "assets",
    ],
)

Depends(firmware_elf, depends)


fwenv.HEXBuilder("${FIRMWARE_BUILD_CFG}")
fwenv.BINBuilder("${FIRMWARE_BUILD_CFG}")
dfu = fwenv.DFUBuilder("${FIRMWARE_BUILD_CFG}")
Default(dfu)
Alias("dfu", dfu)


flash = fwenv.Command(
    target="flash",
    source="${FIRMWARE_BUILD_CFG}.bin",
    action='openocd ${OPENOCD_OPTS} -c "program ${SOURCES} reset exit ${IMAGE_BASE_ADDRESS}"',
)
Alias("flash", flash)


# Compile DB generation
cdb = fwenv.CompilationDatabase("compile_database.json")
Alias("cdb", cdb)
# Depends(firmware_elf, cdb)
