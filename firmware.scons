Import("env")

import os

env.Append(
    LIB_DIST_DIR="${BUILD_DIR}/lib",
)

env.Append(
    LIBPATH=[
        "${LIB_DIST_DIR}",
    ],
    CPPDEFINES=[
        ("TARGET", "${TARGET_HW}"),
    ],
)


env.Append(
    CPPPATH=[
        "#/core",
        "#/applications",
        "#/firmware/targets/f${TARGET_HW}/ble_glue",
        "#/firmware/targets/f${TARGET_HW}/fatfs",
        "#/firmware/targets/f${TARGET_HW}/furi_hal",
        "#/firmware/targets/f${TARGET_HW}/Inc",
        "#/firmware/targets/furi_hal_include",
    ]
)

depends = env.BuildModules(
    [
        "lib",
        "firmware",
        "assets",
        "core",
    ],
)

fwenv = env.Clone()
Export("fwenv")

SConscript("sconscfg/firmwareopts.scons")
SConscript("sconscfg/appmanifests.scons")


if fwenv["FIRMWARE_BUILD_CFG"] == "updater":
    fwenv.Append(
        APPS=[
            "updater",
        ]
    )
else:
    fwenv.Append(
        APPS=[
            "crypto_start",
            # Svc
            "rpc",
            "bt",
            "desktop",
            "loader",
            "power",
            # Arch
            "archive",
            # Apps
            "gpio",
            "ibutton",
            "infrared",
            "lfrfid",
            "nfc",
            "subghz",
            "bad_usb",
            "u2f",
            "updater_app",
            # Settings
            "passport",
            "system_settings",
            "about",
            # Plugins
            "music_player",
            "snake_game",
            "bt_hid",
            # Debug
            "blink_test",
            "vibro_test",
            "keypad_test",
            "usb_test",
            "usb_mouse",
            "uart_echo",
            "display_test",
            "text_box_test",
            "infrared_monitor",
            "file_browser_test",
        ]
    )

fwenv.LoadApplicationManifests()
fwenv.PrepareApplicationsBuild()

fwenv.Append(
    CPPDEFINES=fwenv["APPBUILD"].get_apps_cdefs(),
)

Import("build_apps_c")

apps_c = fwenv.Command(
    "applications/applications.c",
    [],
    action=build_apps_c,
)
fwenv.AlwaysBuild(apps_c)


sources = [apps_c]
for app_folder in fwenv["APPBUILD"].get_app_folders():
    sources += fwenv.GlobRecursive("*.c*", os.path.join("applications", app_folder))

# Debug
# print(fwenv.Dump())

# Git Version management

build_version = fwenv.Command(
    "#lib/toolbox/version.inc.h",
    [],
    "${PYTHON3} scripts/version.py generate -o ${TARGET} --dir ${ROOT_DIR}",
)
fwenv.Precious(build_version)
fwenv.AlwaysBuild(build_version)


# Full firmware definition

fwenv.Append(
    CCFLAGS=[
        # "--specs=nosys.specs",
        # "--specs=nano.specs",
    ],
    LINKFLAGS=[
        "-specs=nano.specs",
        "-specs=nosys.specs",
        "-Wl,--start-group",
        "-lstdc++",
        "-lsupc++",
        "-Wl,--end-group",
        "-Wl,--gc-sections",
        "-Wl,--undefined=uxTopUsedPriority",
        "-Wl,--wrap,_malloc_r",
        "-Wl,--wrap,_free_r",
        "-Wl,--wrap,_calloc_r",
        "-Wl,--wrap,_realloc_r",
        "-u _printf_float",
        "-n",
    ],
)

firmware_elf = fwenv.Program(
    "${FIRMWARE_BUILD_CFG}",
    sources,
    LIBS=[
        "flipper${TARGET_HW}",
        "core",
        "freertos",
        "stm32cubewb",
        "hwdrivers",
        "fatfs",
        "littlefs",
        "subghz",
        "flipperformat",
        "toolbox",
        "microtar",
        "usb_stm32",
        "st25rfal002",
        "infrared",
        "appframe",
        "assets",
        "misc",
        # 2nd round
        "flipperformat",
        "toolbox",
    ],
)

Depends(firmware_elf, depends)


fwenv.HEXBuilder("${FIRMWARE_BUILD_CFG}")
fwenv.BINBuilder("${FIRMWARE_BUILD_CFG}")
dfu = fwenv.DFUBuilder("${FIRMWARE_BUILD_CFG}")
Default(dfu)
Alias("dfu", dfu)


flash = fwenv.Command(
    target="flash",
    source="${FIRMWARE_BUILD_CFG}.bin",
    action='openocd ${OPENOCD_OPTS} -c "program ${SOURCES} reset exit ${IMAGE_BASE_ADDRESS}"',
)
Alias("flash", flash)


# Compile DB generation
cdb = fwenv.CompilationDatabase("compile_database.json")
Alias("cdb", cdb)
# Depends(firmware_elf, cdb)
