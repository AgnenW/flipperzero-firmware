Import("env", "variant_dir_name")

env.Append(
    FLIPPER_TARGET="7",
    BUILD_DIR=variant_dir_name,
)

env.Append(
    LIBPATH=[
        "#/${BUILD_DIR}/lib",
    ],
    CPPDEFINES=[
        ("TARGET", "${FLIPPER_TARGET}"),
    ],
)

env.Append(
    CPPPATH=[
        "#/core",
        "#/applications",
        "#/firmware/targets/f${FLIPPER_TARGET}/ble_glue",
        "#/firmware/targets/f${FLIPPER_TARGET}/fatfs",
        "#/firmware/targets/f${FLIPPER_TARGET}/furi_hal",
        "#/firmware/targets/f${FLIPPER_TARGET}/Inc",
        "#/firmware/targets/furi_hal_include",
    ]
)

depends = env.BuildModules(
    env,
    [
        "#/lib",
        "#/firmware",
    ],
)

fwenv = env.Clone()
Export("fwenv")

SConscript("sconscfg/firmwareopts.scons")


if fwenv["FIRMWARE_BUILD_CFG"] == "updater":
    fwenv.Append(
        CPPDEFINES=[
            "SRV_GUI",
            "SRV_INPUT",
            "SRV_NOTIFICATION",
            "SRV_STORAGE",
            "SRV_UPDATER",
        ]
    )
else:
    fwenv.Append(
        CPPDEFINES=[
            "APP_ABOUT",
            "APP_ACCESSOR",
            "APP_ARCHIVE",
            "APP_BAD_USB",
            "APP_BLE_HID",
            "APP_BLINK",
            "APP_DISPLAY_TEST",
            "APP_GPIO",
            "APP_IBUTTON",
            "APP_INFRARED",
            "APP_INFRARED_MONITOR",
            "APP_KEYPAD_TEST",
            "APP_LF_RFID",
            "APP_MUSIC_PLAYER",
            "APP_NFC",
            "APP_PASSPORT",
            "APP_SNAKE_GAME",
            "APP_SUBGHZ",
            "APP_U2F",
            "APP_UART_ECHO",
            "APP_UPDATER",
            "APP_USB_MOUSE",
            "APP_USB_TEST",
            "APP_VIBRO_TEST",
            "SRV_BT",
            "SRV_CLI",
            "SRV_DESKTOP",
            "SRV_DIALOGS",
            "SRV_DOLPHIN",
            "SRV_GUI",
            "SRV_INPUT",
            "SRV_LOADER",
            "SRV_NOTIFICATION",
            "SRV_POWER",
            "SRV_RPC",
            "SRV_STORAGE",
        ]
    )


sources = fwenv.GlobRecursive("*.c*", "applications")
sources += Glob("assets/compiled/*.c*", source=True)


# print(fwenv.Dump())
cdb = fwenv.CompilationDatabase("compile_database.json")
Alias("cdb", cdb)


build_version = fwenv.Command(
    "#lib/toolbox/version.inc.h",
    [],
    "${PYTHON3} scripts/version.py generate -o ${TARGET} --dir .",
)
# fwenv.AlwaysBuild(build_version)

build_version_noarg = fwenv.Command(
    [],
    [],
    "${PYTHON3} scripts/version .py generate -o lib/toolbox/version.inc.h --dir .",
)
fwenv.AlwaysBuild(build_version_noarg)


def version_action(target, source, fwenv):
    """
    Generate the version file with the current version in it
    """
    contents = version_build_template % (fwenv["VERSION"].toString())
    fd = open(target[0].path, "w")
    fd.write(contents)
    fd.close()
    return 0


fwenv.Append(
    # LIBPATH=[
    #     "#/lib",
    # ],
    LIBS=[
        "flipper${FLIPPER_TARGET}",
        "freertos",
        "STM32CubeWB",
        "hwdrivers",
        "fatfs",
        "littlefs",
        "subghz",
        "toolbox",
        "usb_stm32",
        "ST25RFAL002",
        "flipperformat",
        "misc",
        "infrared",
        "appframe",
    ],
)

firmware_elf = fwenv.Program("${FIRMWARE_BUILD_CFG}", sources)
# fwenv.AddPreAction(
#     firmware_elf,
#     Action(
#         build_version_noarg
#         # "${PYTHON3} scripts/version.py generate -o lib/toolbox/version.inc.h --dir .",
#     ),
# )
Requires(firmware_elf, depends)


fwenv.HEXBuilder("${FIRMWARE_BUILD_CFG}")
fwenv.BINBuilder("${FIRMWARE_BUILD_CFG}")
fwenv.DFUBuilder("${FIRMWARE_BUILD_CFG}")
