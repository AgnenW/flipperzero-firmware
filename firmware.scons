Import("env")
SConscript("lib/lib.scons")

env.Append(FLIPPER_TARGET="7")

env.Append(
    CPPDEFINES=[
        ("TARGET", "${FLIPPER_TARGET}"),
        "APP_ABOUT",
        "APP_ACCESSOR",
        "APP_ARCHIVE",
        "APP_BAD_USB",
        "APP_BLE_HID",
        "APP_BLINK",
        "APP_DISPLAY_TEST",
        "APP_GPIO",
        "APP_IBUTTON",
        "APP_INFRARED",
        "APP_INFRARED_MONITOR",
        "APP_KEYPAD_TEST",
        "APP_LF_RFID",
        "APP_MUSIC_PLAYER",
        "APP_NFC",
        "APP_PASSPORT",
        "APP_SNAKE_GAME",
        "APP_SUBGHZ",
        "APP_U2F",
        "APP_UART_ECHO",
        "APP_UPDATER",
        "APP_USB_MOUSE",
        "APP_USB_TEST",
        "APP_VIBRO_TEST",
        "SRV_BT",
        "SRV_CLI",
        "SRV_DESKTOP",
        "SRV_DIALOGS",
        "SRV_DOLPHIN",
        "SRV_GUI",
        "SRV_INPUT",
        "SRV_LOADER",
        "SRV_NOTIFICATION",
        "SRV_POWER",
        "SRV_RPC",
        "SRV_STORAGE",
    ]
)

env.Append(
    CPPPATH=[
        ".",
        "./applications",
        "./assets/compiled",
        "./core",
        "./firmware/targets/f${FLIPPER_TARGET}/ble_glue",
        "./firmware/targets/f${FLIPPER_TARGET}/fatfs",
        "./firmware/targets/f${FLIPPER_TARGET}/furi_hal",
        "./firmware/targets/f${FLIPPER_TARGET}/Inc",
        "./firmware/targets/furi_hal_include",
    ]
)


sources = env.GlobRecursive("*.c", "core")
sources += env.GlobRecursive("*.c", "firmware")
sources += ["firmware/targets/f${FLIPPER_TARGET}/startup_stm32wb55xx_cm4.s"]
sources += env.GlobRecursive("*.c*", "applications")

libs_recurse = [
    "assets/compiled",
    "lib/app-scened-template",
    "lib/drivers",
    "lib/flipper_format",
    "lib/nfc_protocols",
    "lib/microtar/src",
    "lib/update_util",
    "lib/subghz",
    "lib/toolbox",
    "lib/micro-ecc",
    "lib/one_wire",
    "lib/infrared",
    "lib/ST25RFAL002/source",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/utilities/",
    "lib/u8g2",
]

for lib in libs_recurse:
    sources += env.GlobRecursive("*.c*", lib)


libs_plain = [
    "lib/fatfs",
    "lib/heatshrink",
    "lib/littlefs",
    "lib/nanopb",
    "lib/libusb_stm32/src",
    "lib/ST25RFAL002",
]

for lib in libs_plain:
    sources += Glob(lib + "/*.c*", source=True)


sources += [
    "lib/fatfs/option/unicode.c",
    "lib/STM32CubeWB/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c",
]

sources += Glob(
    "lib/STM32CubeWB/Middlewares/Third_Party/FreeRTOS/Source/*.c", source=True
)
sources += Glob(
    "lib/STM32CubeWB/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/*.c",
    source=True,
)


sources += env.GlobRecursive(
    "*_ll_*.c", "lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Src/", exclude="*usb.c"
)

sources += Glob(
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/interface/patterns/ble_thread/shci/*.c",
    source=True,
)
sources += Glob(
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/interface/patterns/ble_thread/tl/*_tl*.c",
    source=True,
)

sources += [
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/interface/patterns/ble_thread/tl/tl_mbox.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/svc/Src/svc_ctl.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/core/auto/ble_gap_aci.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/core/auto/ble_gatt_aci.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/core/auto/ble_hal_aci.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/core/auto/ble_hci_le.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/core/auto/ble_l2cap_aci.c",
    "lib/STM32CubeWB/Middlewares/ST/STM32_WPAN/ble/core/template/osal.c",
]

# print(dir(env))
env.Program("flipperfw", sources)
env.HEXBuilder(target="flipperfw.hex", source="flipperfw.elf")
env.BINBuilder(target="flipperfw.bin", source="flipperfw.elf")
