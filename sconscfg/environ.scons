from SCons.Subst import quote_spaces
from SCons.Platform import TempFileMunge

import SCons
import os
import sys
import re
import multiprocessing

TOOLCHAIN_PREFIX = "arm-none-eabi-"

vars = Variables(None, ARGUMENTS)
vars.Add(BoolVariable("DEBUG", help="Enable debug build", default=1))
vars.Add(BoolVariable("COMPACT", help="Optimize for size", default=0))
vars.Add(
    BoolVariable("RAM_EXEC", help="Build updater image for RAM exection", default=0)
)

env = Environment(
    variables=vars,
    tools=["gcc", "g++", "ar", "gnulink", "python", "compilation_db"],
    # CC="arm-none-eabi-gcc",
    # CXX="arm-none-eabi-g++",
    # LINK="arm-none-eabi-g++",
    # CCFLAGS=[],
    # LINKFLAGS=[],
    OBJCOPY="objcopy",
    PYTHON3="python3",
    TEMPFILE=TempFileMunge,
    MAXLINELENGTH=2048,
    PROGSUFFIX=".elf",
    COMPILATIONDB_USE_ABSPATH=True,
    ENV={
        "PATH": os.environ["PATH"],
    },
)
Help(vars.GenerateHelpText(env))

# Default value for -j

SetOption("num_jobs", multiprocessing.cpu_count())


# Setting up temp file parameters

WINPATHSEP_RE = re.compile(r"\\([^\"'\\]|$)")


def tempfile_arg_esc_func(arg):
    arg = quote_spaces(arg)
    if sys.platform != "win32":
        return arg
    # GCC requires double Windows slashes, let's use UNIX separator
    return WINPATHSEP_RE.sub(r"/\1", arg)


env["TEMPFILEARGESCFUNC"] = tempfile_arg_esc_func

# Set up cross-compile tools
for binary in [
    "AR",
    # "AS",
    "CC",
    "CXX",
    # "LINK",
    # "RANLIB",
    "OBJCOPY",
    # "OBJDUMP",
    # "OBJSYMBOLS",
]:
    env[binary] = TOOLCHAIN_PREFIX + env[binary]

# Commandline length limit hack
env["LINKCOM"] = '${TEMPFILE("' + env["LINKCOM"] + '","$LINKCOMSTR")}'

# Recursive glob
def GlobRecursive(pattern, node=".", exclude=None):
    results = []
    for f in Glob(str(node) + "/*", source=True, exclude=exclude):
        if type(f) is SCons.Node.FS.Dir:
            # print(f"recursing into {f}")
            results += GlobRecursive(pattern, f, exclude)
    current_node_str = str(node) + "/"
    results += Glob(
        current_node_str + pattern,
        source=True,
        exclude=exclude and current_node_str + exclude or exclude,
    )
    return results


env.GlobRecursive = GlobRecursive

Export("env")
